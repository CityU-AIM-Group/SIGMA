OUTPUT_DIR: './experiments/sigma_plus_plus/city_to_foggy/'
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: 'https://s3.ap-northeast-2.amazonaws.com/open-mmlab/pretrain/third_party/vgg16_caffe-292e1171.pth' # Initialed by imagenet
#  WEIGHT: './published_models/city_to_foggy_model_44_mAP.pth' # Initialed by our models
#  WEIGHT: './published_models/city_to_foggy_model_45_mAP.pth' # Initialed by our models
  RPN_ONLY: True
  FCOS_ON: True
  ATSS_ON: False # ATSS is integrated in this project
  DA_ON: True # whether conduct domain adaptation
  MIDDLE_HEAD_CFG: 'GM_HEAD' # prepared for unifying our previous SCAN framework
  MIDDLE_HEAD:
    CONDGRAPH_ON: True
    IN_NORM: 'LN' # vision-to-graph transformation (support GN/BN/LN)
    NUM_CONVS_IN: 1 # the number of conv/linear in V2G
    GM:
      # SIGMA++:
      WITH_HyperGNN: True
      HyperEdgeNum: 9 # the number of nodes in a hyperedge
      NUM_HYPERGNN_LAYER: 1 # the numeber of HGCN layers (1/2)
      ANGLE_EPS: 1e-2 # \epsilon in  Eq.7
      # SIGMA:
      # node sampling
      NUM_NODES_PER_LVL_SR: 100  # per-level maximum nodes
      NUM_NODES_PER_LVL_TG: 100
      BG_RATIO: 8 # the background node ratio
      # loss weight
      NODE_DIS_WEIGHT: 0.1 # node discriminator loss weight
      NODE_DIS_LAMBDA:  0.02 # gradient scaling
      NODE_LOSS_WEIGHT: 1.0 # node loss to train auxilary parameters
      MATCHING_LOSS_WEIGHT: 0.1 # for adapting p(x|y) with matching
      # detailed settings
      MATCHING_LOSS_CFG: 'MSE' # matching loss config
      MATCHING_CFG: 'o2o' # one-to-one (o2o) or many-to-many (m2m) (m2m replaces sinkhorn with sigmoid)
      WITH_QUADRATIC_MATCHING: True # high-order matching constraints in graph matching.
      WITH_NODE_DIS: True # node discriminator for adapting p(x)
      WITH_SEMANTIC_COMPLETION: True # conduct Gaussian sampling to complete the missing nodes
      WITH_CLUSTER_UPDATE: False # use spectral clustering to update the Graph-guided Memory Bank (needs warm-up)
      WITH_COMPLETE_GRAPH: True # conduct one-layer graph-based message propagation
      WITH_DOMAIN_INTERACTION: True # Cross Graph Interaction
      WITH_SCORE_WEIGHT: False # use confidence as the adaptive weight in the node loss
      WITH_CTR: False  # sample target nodes with classification scores \times centerness scores
  BACKBONE:
    CONV_BODY: "VGG-16-FPN-RETINANET"
  RETINANET:
    USE_C5: False # FCOS uses P5 instead of C5
  FCOS:
    NUM_CONVS_REG: 4
    NUM_CONVS_CLS: 4
    NUM_CLASSES: 9
    INFERENCE_TH: 0.05    # pre_nms_thresh    (default=0.05)
    PRE_NMS_TOP_N: 1000   # pre_nms_top_n     (default=1000)
    NMS_TH: 0.6           # nms_thresh        (default=0.6)
    REG_CTR_ON: True
  ADV:
    USE_DIS_GLOBAL: True
    GA_DIS_LAMBDA: 0.2
    CON_NUM_SHARED_CONV_P7: 4
    CON_NUM_SHARED_CONV_P6: 4
    CON_NUM_SHARED_CONV_P5: 4
    CON_NUM_SHARED_CONV_P4: 4
    CON_NUM_SHARED_CONV_P3: 4

    USE_DIS_P7: True
    USE_DIS_P6: True
    USE_DIS_P5: True
    USE_DIS_P4: True
    USE_DIS_P3: True

    GRL_WEIGHT_P7: 0.02
    GRL_WEIGHT_P6: 0.02
    GRL_WEIGHT_P5: 0.02
    GRL_WEIGHT_P4: 0.02
    GRL_WEIGHT_P3: 0.02
TEST:
  DETECTIONS_PER_IMG: 100 # fpn_post_nms_top_n  (default=100)
  MODE: 'common'
DATASETS:
  TRAIN_SOURCE: ("cityscapes_train_cocostyle", )
  TRAIN_TARGET: ("cityscapes_foggy_train_cocostyle", )
  TEST: ("cityscapes_foggy_val_cocostyle", )
INPUT:
  MIN_SIZE_RANGE_TRAIN: (640, 800)
  MIN_SIZE_TRAIN: (800,)
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MAX_SIZE_TEST: 1333
DATALOADER:
  SIZE_DIVISIBILITY: 32
SOLVER:
  VAL_ITER: 100 # validation frequency
  VAL_ITER_START: 35000 # start validation if iter > VAL_ITER_START
  INITIAL_AP50: 41 # save checkpoints if validation mAP > INITIAL_AP50
  WEIGHT_DECAY: 0.0001
  MAX_ITER: 100000
  # 2 for source and 2 for target
  IMS_PER_BATCH: 4 # you can use bs=2 for 2080Ti
  CHECKPOINT_PERIOD: 10000 # save checkpoints every CHECKPOINT_PERIOD iter
  BACKBONE:
    BASE_LR: 0.0025
    STEPS: (60000, ) # NOTE: lr reducing will make results stable
    WARMUP_ITERS: 1000
    WARMUP_METHOD: "constant"
  MIDDLE_HEAD:
    BASE_LR: 0.005
    STEPS:  (60000, )
    WARMUP_ITERS: 1000
    WARMUP_METHOD: "constant"
    PLABEL_TH: (0.5, 1.0)  # sample the node satisfying cls 0.5 < score < 1.0
  FCOS:
    BASE_LR: 0.0025
    STEPS: (60000, )
    WARMUP_ITERS: 1000
    WARMUP_METHOD: "constant"
  DIS:
    BASE_LR: 0.0025
    STEPS: (60000, )
    WARMUP_ITERS: 1000
    WARMUP_METHOD: "constant"
